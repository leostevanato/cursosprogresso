{"version":3,"file":"barradeprogresso.min.js","sources":["../src/barradeprogresso.js"],"sourcesContent":["/**\n * Converte uma determinada string de seletor em um seletor de ID válido\n * cortando espaços em branco, substituindo vários espaços por hífens e\n * garantindo que comece com '#'.\n *\n * @param {string} seletor - A string seletor a ser convertida.\n * @return {string} A string convertida.\n */\nfunction converterParaSeletorId(seletor) {\n  seletor = seletor.trim().replace(/\\s+/g, '-');\n  if (!seletor.startsWith('#')) {\n    seletor = '#' + seletor;\n  }\n  return seletor;\n}\n\n/**\n * Formata um determinado valor percentual em uma string com um número\n * especificado de casas decimais e um símbolo de porcentagem opcional.\n *\n * @param {number} porcentagem - O valor percentual a ser formatado\n * @param {number} casasDecimais - O número de casas decimais a serem\n * incluídas na porcentagem formatada (o padrão é 0)\n * @param {boolean} incluirSimbolo - Se deve incluir o símbolo de\n * porcentagem na string formatada (o padrão é true)\n * @return {string} O valor percentual formatado como uma string\n */\nfunction formatarPorcentagem(porcentagem, casasDecimais = 0, incluirSimbolo = true) {\n  porcentagem = parseFloat(porcentagem);\n\n  if (porcentagem < 100) {\n    porcentagem = porcentagem.toFixed(casasDecimais);\n    const [integerPart, decimalPart] = porcentagem.split('.');\n    porcentagem = decimalPart > 0 ? porcentagem : integerPart;\n  }\n\n  return incluirSimbolo ? `${porcentagem}%` : porcentagem;\n}\n\nexport const initBarraProgresso = ({barraprogressodivid, barraprogressopct}) => {\n  barraprogressodivid = converterParaSeletorId(barraprogressodivid);\n\n  const barraProgressoContainer = document.querySelector(barraprogressodivid);\n\n  if (barraProgressoContainer) {\n    const barraProgresso = barraProgressoContainer.querySelector('.barra-de-progresso');\n    const bpCarregando = barraProgresso.querySelector('.carregando');\n    const bpBarra = barraProgresso.querySelector('.barra');\n    const bpPctTexto = barraProgresso.querySelector('.porcetagem-texto');\n    const bpBarraCirculo = bpBarra.querySelector('.circulo-indicador');\n    const bpBarraProgresso = bpBarra.querySelector('.progresso');\n    const larguraBarraCirculo = `${(30 / 2)}px`;\n\n    bpBarraCirculo.style.left = `calc(${barraprogressopct}% - ${larguraBarraCirculo})`;\n    bpBarraProgresso.style.width = `${barraprogressopct}%`;\n    bpPctTexto.textContent = formatarPorcentagem(barraprogressopct, 1);\n    bpCarregando.style.display = 'none';\n    bpBarra.style.display = 'block';\n    bpPctTexto.style.display = 'block';\n  }\n};"],"names":["_ref","barraprogressodivid","barraprogressopct","seletor","trim","replace","startsWith","barraProgressoContainer","document","querySelector","barraProgresso","bpCarregando","bpBarra","bpPctTexto","bpBarraCirculo","bpBarraProgresso","larguraBarraCirculo","style","left","width","textContent","porcentagem","casasDecimais","incluirSimbolo","parseFloat","toFixed","integerPart","decimalPart","split","formatarPorcentagem","display"],"mappings":"qMAuCkCA,WAACC,oBAACA,oBAADC,kBAAsBA,4BA/BzBC,SAC9BA,SAD8BA,QAgCeF,qBA/B3BG,OAAOC,QAAQ,OAAQ,MAC5BC,WAAW,OACtBH,QAAU,IAAMA,SA6BlBF,oBA3BOE,cA6BDI,wBAA0BC,SAASC,cAAcR,wBAEnDM,wBAAyB,OACrBG,eAAiBH,wBAAwBE,cAAc,uBACvDE,aAAeD,eAAeD,cAAc,eAC5CG,QAAUF,eAAeD,cAAc,UACvCI,WAAaH,eAAeD,cAAc,qBAC1CK,eAAiBF,QAAQH,cAAc,sBACvCM,iBAAmBH,QAAQH,cAAc,cACzCO,oBAAuB,OAE7BF,eAAeG,MAAMC,KAAQ,QAAOhB,wBAAwBc,uBAC5DD,iBAAiBE,MAAME,MAAS,GAAEjB,qBAClCW,WAAWO,qBA5BcC,iBAAaC,qEAAgB,EAAGC,8EAC3DF,YAAcG,WAAWH,cAEP,IAAK,CACrBA,YAAcA,YAAYI,QAAQH,qBAC3BI,YAAaC,aAAeN,YAAYO,MAAM,KACrDP,YAAcM,YAAc,EAAIN,YAAcK,mBAGzCH,eAAkB,GAAEF,eAAiBA,YAmBjBQ,CAAoB3B,kBAAmB,GAChES,aAAaM,MAAMa,QAAU,OAC7BlB,QAAQK,MAAMa,QAAU,QACxBjB,WAAWI,MAAMa,QAAU"}